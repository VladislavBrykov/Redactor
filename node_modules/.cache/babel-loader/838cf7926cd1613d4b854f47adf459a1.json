{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/vladislav/Desktop/CalendarIvent-master/src/pages/Calendar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport axios from 'axios';\nimport CalendarModalWindow from './../components/CalendarModalWindow';\nimport 'react-big-calendar/lib/sass/styles.scss';\nvar localizer = momentLocalizer(moment);\nvar allViews = {\n  month: true,\n  day: true,\n  agenda: true\n};\nexport default _s(function (_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpenModal = _useState2[0],\n      isOpenModalChange = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentEvent = _useState4[0],\n      currentEventChange = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allEvents = _useState6[0],\n      allEventsChange = _useState6[1]; // Функция открытия модального окна и установка выбранного ивента\n\n\n  var openModal = function openModal(event) {\n    isOpenModalChange(true);\n    currentEventChange(event);\n  }; // Функция закрытия модального окна и уадление выбранного ивента\n\n\n  var closeModal = function closeModal() {\n    isOpenModalChange(false);\n    currentEventChange(null);\n  };\n\n  var newIvent = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(start, end, title, description) {\n      var body, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //новый ивент запрос на сервер\n              body = {\n                \"start\": start,\n                \"end\": end,\n                \"title\": title,\n                \"description\": description\n              }; // То что передаем на сервер\n\n              console.log(body);\n              axios.defaults.baseURL = 'http://localhost:3000/api';\n              _context.next = 5;\n              return axios.post(\"/mycalendar\", body, {\n                headers: {\n                  Authorization: localStorage.jwtToken\n                }\n              });\n\n            case 5:\n              res = _context.sent;\n              alert('ивент создан');\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function newIvent(_x, _x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var delIvent = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var body, res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              //del ивент запрос на сервер\n              body = {\n                \"event_id\": id\n              }; // То что передаем на сервер\n\n              console.log(body);\n              axios.defaults.baseURL = 'http://localhost:3000/api';\n              _context2.next = 5;\n              return axios.delete(\"/event\", body, {\n                headers: {\n                  Authorization: localStorage.jwtToken\n                }\n              });\n\n            case 5:\n              res = _context2.sent;\n              alert('ивент удален');\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function delIvent(_x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // const allIvent = async () => { //del ивент запрос на сервер\n  //   // const body = { \"event_id\": id} // То что передаем на сервер\n  //   // console.log(body);\n  //   axios.defaults.baseURL = 'http://localhost:3000/api';\n  //   const res = await axios.get(\n  //     `/event`,\n  //     //body,\n  //     {\n  //       headers: {\n  //         Authorization: localStorage.jwtToken\n  //       }\n  //     }\n  //   );\n  //   console.log(res.data.rp);\n  //   alert('ивенты подгружены');\n  //   return(res.data.rp)\n  // }\n  // Функция для создания ивента\n  // Можно добавить функцию обращения к API для создания ивента в указанном месте\n  // А можно заменить allEventsChange на функцию обращения к API для создания ивента, а потом вызвать функцию получения данных о ивентах\n\n\n  var handleSelectSlot = function handleSelectSlot(_ref4) {\n    var start = _ref4.start,\n        end = _ref4.end;\n    var title = window.prompt('Название нового ивента');\n\n    if (title) {\n      var description = window.prompt('Описание нового ивента'); // allEventsChange([\n      //   ...allEvents,\n      //   {\n      //     id: allEvents.length + 1,\n      //     start,\n      //     end,\n      //     title,\n      //     description\n      //   },\n      // ])\n\n      newIvent(start, end, title, description);\n    } // let a = allIvent()\n    // console.log(a);\n    //allIvent();\n\n  }; // Функция отслеживания выбора ивента для открытия модального окна\n\n\n  var handleSelectEvent = function handleSelectEvent(event) {\n    return openModal(event);\n  }; // Функция для удаления ивента\n  // Можно сделать также, как и со созданием\n\n\n  var deleteEvent = function deleteEvent(event) {\n    if (window.confirm(\"\\u0412\\u044B \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0443\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0438\\u0432\\u0435\\u043D\\u0442 \\\"\".concat(event.title, \"\\\"\"))) {\n      allEventsChange(allEvents.filter(function (v) {\n        return v.id != event.id;\n      }));\n      closeModal();\n    }\n\n    delIvent(2);\n  };\n\n  useEffect(function () {\n    var allIvent = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //del ивент запрос на сервер\n                // const body = { \"event_id\": id} // То что передаем на сервер\n                // console.log(body);\n                axios.defaults.baseURL = 'http://localhost:3000/api';\n                _context3.next = 3;\n                return axios.get(\"/event\", //body,\n                {\n                  headers: {\n                    Authorization: localStorage.jwtToken\n                  }\n                });\n\n              case 3:\n                res = _context3.sent;\n                console.log(res.data.rp);\n                alert('ивенты подгружены');\n                return _context3.abrupt(\"return\", res.data.rp);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function allIvent() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    var a = allIvent();\n    console.log(a); // Здесь должен быть запрос на получение данных о ивентах\n    // После поулчения нужно установить, как сделано ниже, только уже с данными полученными от API\n\n    allEventsChange([a[0] // {\n    //   id: a.id,\n    //   start: a.start,\n    //   end: a.end,\n    //   title: a.title,\n    //   description: a.description,\n    // },\n    // {\n    //   id: 2,\n    //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 4,\n    //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 5,\n    //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 6,\n    //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 7,\n    //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 8,\n    //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 9,\n    //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    ]);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Calendar, {\n    localizer: localizer,\n    views: allViews,\n    events: allEvents,\n    style: {\n      height: 600\n    },\n    popup: true,\n    selectable: true,\n    onSelectSlot: handleSelectSlot,\n    onSelectEvent: handleSelectEvent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }), isOpenModal ? /*#__PURE__*/React.createElement(CalendarModalWindow, {\n    closeModal: closeModal,\n    currentEvent: currentEvent,\n    deleteEvent: deleteEvent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }) : null);\n}, \"SbeyDyJBev0JryAOfsb1QAI9iHo=\");","map":{"version":3,"sources":["/Users/vladislav/Desktop/CalendarIvent-master/src/pages/Calendar.jsx"],"names":["React","useState","useEffect","Calendar","momentLocalizer","moment","axios","CalendarModalWindow","localizer","allViews","month","day","agenda","isOpenModal","isOpenModalChange","currentEvent","currentEventChange","allEvents","allEventsChange","openModal","event","closeModal","newIvent","start","end","title","description","body","console","log","defaults","baseURL","post","headers","Authorization","localStorage","jwtToken","res","alert","delIvent","id","delete","handleSelectSlot","window","prompt","handleSelectEvent","deleteEvent","confirm","filter","v","allIvent","get","data","rp","a","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport axios from 'axios';\r\n\r\nimport CalendarModalWindow from './../components/CalendarModalWindow'\r\n\r\nimport 'react-big-calendar/lib/sass/styles.scss';\r\n\r\nconst localizer = momentLocalizer(moment)\r\nconst allViews = { month: true, day: true, agenda: true }\r\n\r\nexport default ({ }) => {\r\n  const [isOpenModal, isOpenModalChange] = useState(false)\r\n  const [currentEvent, currentEventChange] = useState(null)\r\n  const [allEvents, allEventsChange] = useState([])\r\n\r\n  // Функция открытия модального окна и установка выбранного ивента\r\n  const openModal = (event) => {\r\n    isOpenModalChange(true)\r\n    currentEventChange(event)\r\n  }\r\n\r\n  // Функция закрытия модального окна и уадление выбранного ивента\r\n  const closeModal = () => {\r\n    isOpenModalChange(false)\r\n    currentEventChange(null)\r\n  }\r\n\r\n  const newIvent = async (start, end, title, description) => { //новый ивент запрос на сервер\r\n    const body = { \"start\": start, \"end\": end, \"title\":title, \"description\": description } // То что передаем на сервер\r\n    console.log(body);\r\n    axios.defaults.baseURL = 'http://localhost:3000/api';\r\n\r\n    const res = await axios.post(\r\n      `/mycalendar`,\r\n      body,\r\n      {\r\n        headers: {\r\n          Authorization: localStorage.jwtToken\r\n        }\r\n      }\r\n    );\r\n    alert('ивент создан');\r\n}\r\n\r\n\r\nconst delIvent = async (id) => { //del ивент запрос на сервер\r\n  const body = { \"event_id\": id} // То что передаем на сервер\r\n  console.log(body);\r\n  axios.defaults.baseURL = 'http://localhost:3000/api';\r\n\r\n  const res = await axios.delete(\r\n    `/event`,\r\n    body,\r\n    {\r\n      headers: {\r\n        Authorization: localStorage.jwtToken\r\n      }\r\n    }\r\n  );\r\n  alert('ивент удален');\r\n}\r\n\r\n\r\n// const allIvent = async () => { //del ивент запрос на сервер\r\n//   // const body = { \"event_id\": id} // То что передаем на сервер\r\n//   // console.log(body);\r\n//   axios.defaults.baseURL = 'http://localhost:3000/api';\r\n\r\n//   const res = await axios.get(\r\n//     `/event`,\r\n//     //body,\r\n//     {\r\n//       headers: {\r\n//         Authorization: localStorage.jwtToken\r\n//       }\r\n//     }\r\n//   );\r\n//   console.log(res.data.rp);\r\n//   alert('ивенты подгружены');\r\n//   return(res.data.rp)\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Функция для создания ивента\r\n  // Можно добавить функцию обращения к API для создания ивента в указанном месте\r\n  // А можно заменить allEventsChange на функцию обращения к API для создания ивента, а потом вызвать функцию получения данных о ивентах\r\n  const handleSelectSlot = ({ start, end }) => {\r\n    const title = window.prompt('Название нового ивента')\r\n    if (title) {\r\n      const description = window.prompt('Описание нового ивента')\r\n\r\n      // allEventsChange([\r\n        \r\n      //   ...allEvents,\r\n      //   {\r\n      //     id: allEvents.length + 1,\r\n      //     start,\r\n      //     end,\r\n      //     title,\r\n      //     description\r\n      //   },\r\n      // ])\r\n\r\n      newIvent(start, end, title, description);\r\n     \r\n    }\r\n    // let a = allIvent()\r\n    // console.log(a);\r\n     //allIvent();\r\n\r\n  }\r\n\r\n  // Функция отслеживания выбора ивента для открытия модального окна\r\n  const handleSelectEvent = (event) => openModal(event)\r\n\r\n  // Функция для удаления ивента\r\n  // Можно сделать также, как и со созданием\r\n  const deleteEvent = (event) => {\r\n\r\n    if (window.confirm(`Вы хотите удалить ивент \"${event.title}\"`)) {\r\n      allEventsChange(allEvents.filter(v => v.id != event.id))\r\n      closeModal()\r\n    }\r\n    delIvent(2);\r\n  }\r\n\r\n  useEffect(() => {\r\nconst allIvent = async () => { //del ивент запрос на сервер\r\n  // const body = { \"event_id\": id} // То что передаем на сервер\r\n  // console.log(body);\r\n  axios.defaults.baseURL = 'http://localhost:3000/api';\r\n\r\n  const res = await axios.get(\r\n    `/event`,\r\n    //body,\r\n    {\r\n      headers: {\r\n        Authorization: localStorage.jwtToken\r\n      }\r\n    }\r\n  );\r\n  console.log(res.data.rp);\r\n  alert('ивенты подгружены');\r\n  return(res.data.rp)\r\n}\r\n\r\n\r\n    let a = allIvent()\r\n    console.log(a);\r\n   \r\n    // Здесь должен быть запрос на получение данных о ивентах\r\n    // После поулчения нужно установить, как сделано ниже, только уже с данными полученными от API\r\n    allEventsChange([a[0]\r\n      // {\r\n      //   id: a.id,\r\n      //   start: a.start,\r\n      //   end: a.end,\r\n      //   title: a.title,\r\n      //   description: a.description,\r\n      // },\r\n      // {\r\n      //   id: 2,\r\n      //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   title: 'test event',\r\n      //   description: 'This is a test description of an event',\r\n      // },\r\n      // {\r\n      //   id: 4,\r\n      //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   title: 'test event',\r\n      //   description: 'This is a test description of an event',\r\n      // },\r\n      // {\r\n      //   id: 5,\r\n      //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   title: 'test event',\r\n      //   description: 'This is a test description of an event',\r\n      // },\r\n      // {\r\n      //   id: 6,\r\n      //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   title: 'test event',\r\n      //   description: 'This is a test description of an event',\r\n      // },\r\n      // {\r\n      //   id: 7,\r\n      //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   title: 'test event',\r\n      //   description: 'This is a test description of an event',\r\n      // },\r\n      // {\r\n      //   id: 8,\r\n      //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   title: 'test event',\r\n      //   description: 'This is a test description of an event',\r\n      // },\r\n      // {\r\n      //   id: 9,\r\n      //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\r\n      //   title: 'test event',\r\n      //   description: 'This is a test description of an event',\r\n      // },\r\n    ])\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Calendar\r\n        localizer={localizer}\r\n        views={allViews}\r\n        events={allEvents}\r\n        style={{ height: 600 }}\r\n        popup\r\n        selectable\r\n        onSelectSlot={handleSelectSlot}\r\n        onSelectEvent={handleSelectEvent}\r\n      />\r\n      {\r\n        isOpenModal\r\n          ? <CalendarModalWindow\r\n            closeModal={closeModal}\r\n            currentEvent={currentEvent}\r\n            deleteEvent={deleteEvent}\r\n          />\r\n          : null\r\n      }\r\n    </div>\r\n  )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
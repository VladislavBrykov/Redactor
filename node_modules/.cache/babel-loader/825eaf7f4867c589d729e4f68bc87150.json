{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/vladislav/Desktop/CalendarIvent-master/src/pages/OneEvent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport axios from 'axios';\nimport CalendarModalWindow from './../components/CalendarModalWindow';\nimport 'react-big-calendar/lib/sass/styles.scss';\nvar localizer = momentLocalizer(moment);\nvar allViews = {\n  month: true,\n  day: true,\n  agenda: true\n};\nexport default _s(function (_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpenModal = _useState2[0],\n      isOpenModalChange = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentEvent = _useState4[0],\n      currentEventChange = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allEvents = _useState6[0],\n      allEventsChange = _useState6[1]; // Функция открытия модального окна и установка выбранного ивента\n\n\n  var openModal = function openModal(event) {\n    isOpenModalChange(true);\n    currentEventChange(event);\n  }; // Функция закрытия модального окна и уадление выбранного ивента\n\n\n  var closeModal = function closeModal() {\n    isOpenModalChange(false);\n    currentEventChange(null);\n  };\n\n  var newIvent = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(start, end, title, description) {\n      var params, body, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //новый ивент запрос на сервер\n              params = window.location.href; //получаем полную ссылку страницы\n\n              params = params.match(/event([^ ]*)/)[1]; //получаем все что идет после /post-id\n              //params = parseInt(params.replace(/\\D+/g, \"\"));  //получаем айди поста со ссылки\n\n              body = {\n                \"start\": start,\n                \"end\": end,\n                \"title\": title,\n                \"description\": description\n              }; // То что передаем на сервер\n\n              console.log(body);\n              axios.defaults.baseURL = 'http://localhost:3000/api';\n              _context.next = 7;\n              return axios.post(\"/event/\" + params, body, {\n                headers: {\n                  Authorization: localStorage.jwtToken\n                }\n              });\n\n            case 7:\n              res = _context.sent;\n              alert('ивент создан');\n              allIvent();\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function newIvent(_x, _x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var delIvent = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var body, res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              //del ивент запрос на сервер\n              body = {\n                \"event_id\": id\n              }; // То что передаем на сервер\n\n              console.log(body);\n              axios.defaults.baseURL = 'http://localhost:3000/api';\n              _context2.next = 5;\n              return axios.patch(\"/event\", body, {\n                headers: {\n                  Authorization: localStorage.jwtToken\n                }\n              });\n\n            case 5:\n              res = _context2.sent;\n              allIvent();\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function delIvent(_x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var allIvent = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var params, res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              //all ивент запрос на сервер\n              params = window.location.href; //получаем полную ссылку страницы\n\n              params = params.match(/event\\/([^ ]*)/)[1]; //получаем все что идет после /post-id\n\n              alert(params); //params = parseInt(params.replace(/\\D+/g, \"\"));  //получаем айди поста со ссылки\n\n              axios.defaults.baseURL = 'http://localhost:3000/api';\n              _context3.next = 6;\n              return axios.get(\"/event/\" + params, //body,\n              {\n                headers: {\n                  Authorization: localStorage.jwtToken\n                }\n              });\n\n            case 6:\n              res = _context3.sent;\n              console.log(res.data.rp);\n              alert('ивенты подгружены');\n              allEventsChange(res.data.rp); //return(res.data.rp)\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function allIvent() {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Функция для создания ивента\n  // Можно добавить функцию обращения к API для создания ивента в указанном месте\n  // А можно заменить allEventsChange на функцию обращения к API для создания ивента, а потом вызвать функцию получения данных о ивентах\n\n\n  var handleSelectSlot = function handleSelectSlot(_ref5) {\n    var start = _ref5.start,\n        end = _ref5.end;\n    var title = window.prompt('Название нового ивента');\n\n    if (title) {\n      var description = window.prompt('Описание нового ивента'); // allEventsChange([\n      //   ...allEvents,\n      //   {\n      //     id: allEvents.length + 1,\n      //     start,\n      //     end,\n      //     title,\n      //     description\n      //   },\n      // ])\n\n      newIvent(start, end, title, description);\n    } // let a = allIvent()\n    // console.log(a);\n    //allIvent();\n\n  }; // Функция отслеживания выбора ивента для открытия модального окна\n\n\n  var handleSelectEvent = function handleSelectEvent(event) {\n    return openModal(event);\n  }; // Функция для удаления ивента\n  // Можно сделать также, как и со созданием\n\n\n  var deleteEvent = function deleteEvent(event) {\n    console.log(event.id + \" event\");\n    delIvent(event.id);\n\n    if (window.confirm(\"\\u0412\\u044B \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0443\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0438\\u0432\\u0435\\u043D\\u0442 \\\"\".concat(event.title, \"\\\"\"))) {\n      allEventsChange(allEvents.filter(function (v) {\n        return v.id != event.id;\n      }));\n      closeModal(); // alert(event_id + \"iddd\")\n      //delIvent(event.id);\n    } // alert(event.id + \"event.id\")\n    // delIvent(event.id);\n\n  };\n\n  useEffect(function () {\n    allIvent(); // }\n    // allEventsChange = allIvent();\n    //allEventsChange([allIvent()\n    // {\n    //   id: 2,\n    //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 4,\n    //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 5,\n    //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 6,\n    //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 7,\n    //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 8,\n    //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    // {\n    //   id: 9,\n    //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n    //   title: 'test event',\n    //   description: 'This is a test description of an event',\n    // },\n    //])\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Calendar, {\n    localizer: localizer,\n    views: allViews,\n    events: allEvents,\n    style: {\n      height: 600\n    },\n    popup: true,\n    selectable: true,\n    onSelectSlot: handleSelectSlot,\n    onSelectEvent: handleSelectEvent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }), isOpenModal ? /*#__PURE__*/React.createElement(CalendarModalWindow, {\n    closeModal: closeModal,\n    currentEvent: currentEvent,\n    deleteEvent: deleteEvent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }) : null);\n}, \"SbeyDyJBev0JryAOfsb1QAI9iHo=\");","map":{"version":3,"sources":["/Users/vladislav/Desktop/CalendarIvent-master/src/pages/OneEvent.jsx"],"names":["React","useState","useEffect","Calendar","momentLocalizer","moment","axios","CalendarModalWindow","localizer","allViews","month","day","agenda","isOpenModal","isOpenModalChange","currentEvent","currentEventChange","allEvents","allEventsChange","openModal","event","closeModal","newIvent","start","end","title","description","params","window","location","href","match","body","console","log","defaults","baseURL","post","headers","Authorization","localStorage","jwtToken","res","alert","allIvent","delIvent","id","patch","get","data","rp","handleSelectSlot","prompt","handleSelectEvent","deleteEvent","confirm","filter","v","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\nimport moment from 'moment'\nimport axios from 'axios';\n\nimport CalendarModalWindow from './../components/CalendarModalWindow'\n\nimport 'react-big-calendar/lib/sass/styles.scss';\n\nconst localizer = momentLocalizer(moment)\nconst allViews = { month: true, day: true, agenda: true }\n\nexport default ({ }) => {\n  const [isOpenModal, isOpenModalChange] = useState(false)\n  const [currentEvent, currentEventChange] = useState(null)\n  const [allEvents, allEventsChange] = useState([])\n\n  // Функция открытия модального окна и установка выбранного ивента\n  const openModal = (event) => {\n    isOpenModalChange(true)\n    currentEventChange(event)\n  }\n\n  // Функция закрытия модального окна и уадление выбранного ивента\n  const closeModal = () => {\n    isOpenModalChange(false)\n    currentEventChange(null)\n  }\n\n  const newIvent = async (start, end, title, description) => { //новый ивент запрос на сервер\n    let params = window.location.href; //получаем полную ссылку страницы\n    params = params.match(/event([^ ]*)/)[1];   //получаем все что идет после /post-id\n    //params = parseInt(params.replace(/\\D+/g, \"\"));  //получаем айди поста со ссылки\n\n    const body = { \"start\": start, \"end\": end, \"title\":title, \"description\": description} // То что передаем на сервер\n    console.log(body);\n    axios.defaults.baseURL = 'http://localhost:3000/api';\n\n    const res = await axios.post(\n      `/event/` + params,\n      body,\n      {\n        headers: {\n          Authorization: localStorage.jwtToken\n        }\n      }\n    );\n    alert('ивент создан');\n    allIvent();\n}\n\n\nconst delIvent = async (id) => { //del ивент запрос на сервер\n  const body = { \"event_id\": id} // То что передаем на сервер\n  console.log(body);\n\n  axios.defaults.baseURL = 'http://localhost:3000/api';\n\n  const res = await axios.patch(\n    `/event`,\n    body,\n    {\n      headers: {\n        Authorization: localStorage.jwtToken\n      }\n    }\n  );\n  allIvent();\n\n}\n\n\nconst allIvent = async () => { //all ивент запрос на сервер\n  let params = window.location.href; //получаем полную ссылку страницы\n  params = params.match(/event\\/([^ ]*)/)[1];   //получаем все что идет после /post-id\n  alert(params)\n  //params = parseInt(params.replace(/\\D+/g, \"\"));  //получаем айди поста со ссылки\n\n  axios.defaults.baseURL = 'http://localhost:3000/api';\n\n  const res = await axios.get(\n    `/event/` + params,\n    //body,\n    {\n      headers: {\n        Authorization: localStorage.jwtToken\n      }\n    }\n  );\n  console.log(res.data.rp);\n  alert('ивенты подгружены');\n  allEventsChange(res.data.rp)\n  //return(res.data.rp)\n}\n\n\n\n\n\n\n  // Функция для создания ивента\n  // Можно добавить функцию обращения к API для создания ивента в указанном месте\n  // А можно заменить allEventsChange на функцию обращения к API для создания ивента, а потом вызвать функцию получения данных о ивентах\n  const handleSelectSlot = ({ start, end }) => {\n    const title = window.prompt('Название нового ивента')\n    if (title) {\n      const description = window.prompt('Описание нового ивента')\n\n      // allEventsChange([\n        \n      //   ...allEvents,\n      //   {\n      //     id: allEvents.length + 1,\n      //     start,\n      //     end,\n      //     title,\n      //     description\n      //   },\n      // ])\n\n      newIvent(start, end, title, description);\n     \n    }\n    // let a = allIvent()\n    // console.log(a);\n     //allIvent();\n\n  }\n\n  // Функция отслеживания выбора ивента для открытия модального окна\n  const handleSelectEvent = (event) => openModal(event)\n\n  // Функция для удаления ивента\n  // Можно сделать также, как и со созданием\n  const deleteEvent = (event) => {\nconsole.log(event.id + \" event\");\ndelIvent(event.id);\n    if (window.confirm(`Вы хотите удалить ивент \"${event.title}\"`)) {\n      allEventsChange(allEvents.filter(v => v.id != event.id))\n      closeModal()\n      // alert(event_id + \"iddd\")\n       //delIvent(event.id);\n    }\n   // alert(event.id + \"event.id\")\n   // delIvent(event.id);\n  }\n\n  useEffect(() => {\n    allIvent();\n\n\n    // }\n   // allEventsChange = allIvent();\n    //allEventsChange([allIvent()\n      // {\n      //   id: 2,\n      //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   title: 'test event',\n      //   description: 'This is a test description of an event',\n      // },\n      // {\n      //   id: 4,\n      //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   title: 'test event',\n      //   description: 'This is a test description of an event',\n      // },\n      // {\n      //   id: 5,\n      //   start: new Date('Wed Apr 21 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   end: new Date('Wed Apr 27 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   title: 'test event',\n      //   description: 'This is a test description of an event',\n      // },\n      // {\n      //   id: 6,\n      //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   title: 'test event',\n      //   description: 'This is a test description of an event',\n      // },\n      // {\n      //   id: 7,\n      //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   title: 'test event',\n      //   description: 'This is a test description of an event',\n      // },\n      // {\n      //   id: 8,\n      //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   title: 'test event',\n      //   description: 'This is a test description of an event',\n      // },\n      // {\n      //   id: 9,\n      //   start: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   end: new Date('Wed Apr 14 2021 17:31:20 GMT+0300 (Москва, стандартное время'),\n      //   title: 'test event',\n      //   description: 'This is a test description of an event',\n      // },\n    //])\n\n  }, [])\n\n  return (\n    <div>\n      <Calendar\n        localizer={localizer}\n        views={allViews}\n        events={allEvents}\n        style={{ height: 600 }}\n        popup\n        selectable\n        onSelectSlot={handleSelectSlot}\n        onSelectEvent={handleSelectEvent}\n      />\n      {\n        isOpenModal\n          ? <CalendarModalWindow\n            closeModal={closeModal}\n            currentEvent={currentEvent}\n            deleteEvent={deleteEvent}\n          />\n          : null\n      }\n    </div>\n  )\n\n}"]},"metadata":{},"sourceType":"module"}
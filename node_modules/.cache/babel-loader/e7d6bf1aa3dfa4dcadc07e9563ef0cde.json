{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/vladislav/Desktop/CalendarIvent-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/vladislav/Desktop/CalendarIvent-master/src/pages/NewCalendar.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport '../components/new_post/new_post.css';\n\nfunction NewCalendar(params) {\n  _s();\n\n  // Страница постов\n  var styles = {\n    //Стили для страницы\n    position: 'absolute',\n    top: '-10px',\n    left: '50%',\n    transform: 'translateX(-50%)'\n  };\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataFromServer = _useState2[0],\n      SetDataFromServer = _useState2[1]; //Используем хук состояния для данных с сервера\n\n\n  var loadData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var title, content, categories, id, body, res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //Функция с запросом на сервер\n              title = document.getElementById('titleBody').value;\n              content = document.getElementById('contentBody').value;\n              categories = document.getElementById('categoriesBody').value;\n              id = localStorage.id;\n              console.log(localStorage.id); // let content = document.getElementById('Editor');\n              // let categories = document.getElementById('Editor');\n\n              body = {\n                \"title\": title,\n                \"content\": content,\n                \"categories\": categories,\n                \"user\": id\n              }; // То что передаем на сервер\n\n              console.log(body); // в axios первый агрумент url, воторой тело, третий объект опций, например заголовки\n\n              axios.defaults.baseURL = 'http://localhost:3000/api';\n              _context.next = 10;\n              return axios.post(\"/posts\", body, {\n                headers: {\n                  Authorization: localStorage.jwtToken\n                }\n              });\n\n            case 10:\n              res = _context.sent;\n              console.log(); //     const res =  axios.get(\"http://localhost:3000/api/categories\")\n              //       .then(({data}) => {\n              //     console.log(data);\n              // })\n              //Для ередачи токена в заголвке нужно использовать такой хедер\n              //Authzorization: '<type> <string>'\n              //type - это тип\\название данных пользователя например 'Token', string - это сами данные, например 'da7dasda8d7asf8sd7fs'\n\n              data = res.data;\n              SetDataFromServer(data); //Обновляем состояние и записываем полученые данные\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  console.log(dataFromServer); //Выводим статус из ответа сервер если он есть, а если нету то null\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: styles,\n    class: \"form_auth_block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"form_auth_block_content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    class: \"form_auth_block_head_text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C\"), /*#__PURE__*/React.createElement(\"form\", {\n    class: \"form_auth_style\",\n    action: \"#\",\n    method: \"post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    rows: \"1\",\n    cols: \"52\",\n    name: \"textArea\",\n    id: \"titleBody\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, \"\\u041E\\u043F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043F\\u0440\\u043E\\u0431\\u043B\\u0435\\u043C\\u0443\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    rows: \"15\",\n    cols: \"52\",\n    name: \"textArea\",\n    id: \"contentBody\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044E\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    rows: \"1\",\n    cols: \"52\",\n    name: \"textArea\",\n    id: \"categoriesBody\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"form_auth_button\",\n    type: \"submit\",\n    name: \"form_auth_submit\",\n    onClick: function onClick() {\n      return loadData();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/posts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 113\n    }\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C\")))))));\n}\n\n_s(NewCalendar, \"cSpd6ICe2p62mr6mz0+b8tcNHO4=\");\n\n_c = NewCalendar;\nexport default NewCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewCalendar\");","map":{"version":3,"sources":["/Users/vladislav/Desktop/CalendarIvent-master/src/pages/NewCalendar.jsx"],"names":["useState","Link","axios","NewCalendar","params","styles","position","top","left","transform","dataFromServer","SetDataFromServer","loadData","title","document","getElementById","value","content","categories","id","localStorage","console","log","body","defaults","baseURL","post","headers","Authorization","jwtToken","res","data"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport '../components/new_post/new_post.css';\n\nfunction NewCalendar(params) {// Страница постов\n  const styles = {//Стили для страницы\n    position: 'absolute',\n    top: '-10px',\n    left: '50%',\n    transform: 'translateX(-50%)'\n  }\n\n  const [dataFromServer, SetDataFromServer] = useState(null); //Используем хук состояния для данных с сервера\n\n  const loadData = async () => { //Функция с запросом на сервер\n\n    let title = document.getElementById('titleBody').value;\n    let content = document.getElementById('contentBody').value;\n    let categories = document.getElementById('categoriesBody').value;\n    let id = localStorage.id;\n\n    console.log(localStorage.id);\n    // let content = document.getElementById('Editor');\n    // let categories = document.getElementById('Editor');\n\n\n    const body = { \"title\": title, \"content\": content, \"categories\": categories, \"user\": id } // То что передаем на сервер\n    console.log(body);\n    // в axios первый агрумент url, воторой тело, третий объект опций, например заголовки\n    axios.defaults.baseURL = 'http://localhost:3000/api';\n\n    const res = await axios.post(\n      `/posts`,\n      body,\n      {\n        headers: {\n          Authorization: localStorage.jwtToken\n        }\n      }\n    );\n    console.log();\n\n    //     const res =  axios.get(\"http://localhost:3000/api/categories\")\n    //       .then(({data}) => {\n    //     console.log(data);\n    // })\n\n    //Для ередачи токена в заголвке нужно использовать такой хедер\n    //Authzorization: '<type> <string>'\n    //type - это тип\\название данных пользователя например 'Token', string - это сами данные, например 'da7dasda8d7asf8sd7fs'\n\n    const data = res.data;\n    SetDataFromServer(data); //Обновляем состояние и записываем полученые данные\n  }\n\n  console.log(dataFromServer);\n\n  //Выводим статус из ответа сервер если он есть, а если нету то null\n\n\n  return (\n    <div>\n      <div>\n        <div style={styles} class=\"form_auth_block\">\n          <div class=\"form_auth_block_content\">\n            <p class=\"form_auth_block_head_text\">Новая запись</p>\n            <form class=\"form_auth_style\" action=\"#\" method=\"post\">\n              <label>Название</label>\n              <textarea rows=\"1\" cols=\"52\" name=\"textArea\" id=\"titleBody\" required></textarea>\n              <label>Опишите проблему</label>\n              <textarea rows=\"15\" cols=\"52\" name=\"textArea\" id=\"contentBody\" required></textarea>\n              <label>Введите категорию</label>\n              <textarea rows=\"1\" cols=\"52\" name=\"textArea\" id=\"categoriesBody\" required></textarea>\n              <button class=\"form_auth_button\" type=\"submit\" name=\"form_auth_submit\" onClick={() => loadData()}><Link to=\"/posts\">Добавить запись</Link></button>\n\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default NewCalendar;\n"]},"metadata":{},"sourceType":"module"}